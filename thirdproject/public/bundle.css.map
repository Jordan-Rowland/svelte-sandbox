{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/Product.svelte",
    "../src/Modal.svelte"
  ],
  "sourcesContent": [
    "<script>\n  /* Creating custom events to emit to parent component. Import createEventDispatcher from svelte */\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  export let title;\n  export let price;\n  export let id;\n  /* Assign a default value to avoid 'expected prop' errors. */\n  export let bestseller = false;\n\n  function addToCart() {\n    /* Use the dispatch object created, and then pass the 'event' as the first argument with an optional second object with data being passed. */\n    dispatch(\"add-to-cart\", {id});\n  }\n\n</script>\n\n<article>\n  <h1>{title}</h1>\n  {#if bestseller}\n    <h4>BEST SELLER!</h4>\n  {/if}\n  <h2>${price}</h2>\n  <button on:click=\"{addToCart}\">Add to Cart</button>\n  <!-- You can also use inline functions to dispatch\n  events upward. -->\n  <button\n    on:click=\"{\n      () => dispatch(\"delete\", {id})}\">\n    Delete\n  </button>\n\n</article>\n\n\n<style>\n  h4 {\n    background-color: yellow;\n  }\n\n</style>\n",
    "<script>\n  import {\n    createEventDispatcher,\n    onMount,\n    onDestroy,\n    beforeUpdate,\n    afterUpdate\n  } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  const closeModal = () => {\n    dispatch(\"cancel-modal\");\n    console.log('Modal cancelled')\n  }\n\n  let agreed = false;\n  let autoscroll = false;\n\n  onMount(\n    () => console.log(\"onMount\")\n  );\n\n  beforeUpdate(() => {\n    console.log(\"Before Update\");\n    autoscroll = agreed;\n  });\n\n  afterUpdate(() => {\n    console.log(\"After Update\");\n    if (autoscroll) {\n      const modal = document.querySelector(\".modal\");\n      modal.scrollTo(0, modal.scrollHeight);\n    }\n  });\n\n  onDestroy(\n    () => console.log(\"onDestroy\")\n  );\n\n  console.table(\"Script executed\")\n</script>\n\n<div class=\"backdrop\"\n    on:click={closeModal}></div>\n  <div class=\"modal\">\n    <header>\n      <slot name=header/>\n    </header>\n  <div>\n    <!-- If you have an unnamed slot, then that slot will be the default for any content that doens't target a named slot. -->\n    <slot />\n  </div>\n  <div class=\"disclaimer\">\n    <h6>Before you close, you must agree to our terms!</h6>\n    <button on:click=\"{() => agreed = true}\">\n      Agree\n    </button>\n  </div>\n  <footer>\n    <!-- You can provide default content for a slot -->\n    <slot name=\"footer\" didAgree={agreed}>\n      <!-- For the didAgree section 6 video 64, 'Using Prop Slots' -->\n      <button on:click={() => dispatch(\"close-modal\")}\n        disabled={!agreed}>\n        Close\n      </button>\n    </slot>\n  </footer>\n</div>\n\n\n\n<style>\n.backdrop {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100vh;\n  background: rgba(0, 0, 0, 0.75);\n  z-index: 10;\n}\n\n.modal {\n  padding: 1rem;\n  position: fixed;\n  top: 10vh;\n  left: 10%;\n  width: 80%;\n  max-height: 20vh;\n  background: white;\n  border-radius: 5px;\n  z-index: 100;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);\n  overflow: scroll;\n}\n\n</style>\n"
  ],
  "names": [],
  "mappings": "AAqCE,EAAE,eAAC,CAAC,AACF,gBAAgB,CAAE,MAAM,AAC1B,CAAC;ACkCH,SAAS,eAAC,CAAC,AACT,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAC/B,OAAO,CAAE,EAAE,AACb,CAAC,AAED,MAAM,eAAC,CAAC,AACN,OAAO,CAAE,IAAI,CACb,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,IAAI,CACT,IAAI,CAAE,GAAG,CACT,KAAK,CAAE,GAAG,CACV,UAAU,CAAE,IAAI,CAChB,UAAU,CAAE,KAAK,CACjB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,GAAG,CACZ,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CACzC,QAAQ,CAAE,MAAM,AAClB,CAAC"
}